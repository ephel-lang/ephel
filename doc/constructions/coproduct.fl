-- CoProduct definition

sig Unit : type
val Unit =
    | () : Unit

val Bool : type =
    | true  : Bool
    | false : Bool

-- Pattern matching

val not : Bool -> Bool =
    | true  => false
    | false => true

-- DSL which mimics OCaml match with construction

sig match_with_end : {A B:type} -> A -> (A -> B) -> B
val match_with_end = a f => f a

val not : Bool -> Bool = b =>
    match b with
    | true  -> false
    | false -> true
    end

val _&&_ : Bool -> Bool -> Bool (infix 15) =
    | true  => b => b
    | false => _ => false

val _||_ : Bool -> Bool -> Bool (infix 15) =
    | true  => _ => true
    | false => b => b

val _==>_ : Bool -> Bool -> Bool (infix 20) = a b => not a or b

-- Recursive CoProduct

val Nat : type =
    | Zero : Nat
    | Succ : Nat -> Nat

sig _+_ : Nat -> Nat -> Nat
val _+_ =
    | Zero   => Identity
    | Succ n => m => Succ (n + m)

-- Parametric CoProduct definition

sig List : type -> type
val List = X =>
    | []   : List X
    | _::_ : X -> List X -> List X

sig size : List X -> Nat
val size =
    | []     => Zero
    | _ :: l => Succ (size l)

-- GADT using intentional type theory for the propositional equality
-- This is not a short term target for the moment.

val :=: : type -> type -> type = A _ =>
    | Refl : A :=: A

val Expr : type -> type = A =>
    | Bool          : Bool -> Expr Bool
    | Int           : Int -> Expr Int
    | _+_           : Exp Int -> Expr Int -> Expr Int
    | If_Then_Else_ : Expr Bool -> Expr A -> Expr A -> Expr A

-{
    With such GADT we can write the following term:
    If Bool true Then Int 1 Else Int 2
}-

-- Absurd

sig _|_ : type
val _|_ = . -{ No possible construction }-