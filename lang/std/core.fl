sig id : {A:type} -> A -> A
val id = x => x

sig _$_ : {A B:type} -> (A -> B) -> A -> B (infixl 1000)
val _$_ = id

sig _<|_ : {A B C:type} -> (B -> C) -> (A -> B) -> (A -> C) (infixr 200)
val _<|_ = f g => x => f (g x)

sig _|>_ : {A B C:type} -> (A -> B) -> (B -> C) -> (A -> C) (infixl 200)
val _|>_ = f g => g <| f

sig const : {A B:type} -> A -> B -> A
val const = a _ => a

sig switch : {A B C:type} -> (A -> B -> C) -> (B -> A -> C)
val switch = f b a => f a b

sig Defer : type -> type
val Defer = let open unit in A => Unit -> A

-{ Explicit variable in type annotation }-

sig {a}_as_{A} : (A:type) -> (a:A) -> A (rinfix 200)
val _as_ = _ => id

--  Examples: 1 as Int, Int as Type, 1 as Int as Type
