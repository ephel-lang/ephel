-{ Prelude }-

open std.core

-{ Type definition }-

sig _? : type -> type (infix 200)
val _? = A =>
    | None : A?
    | Some : A -> A?

-{ Constructors }-

val none : {A:type} -> A? = None
val some : {A:type} -> A -> A? = Some

-{ Catamorphism }-

sig fold : {A R:type} -> A? -> (unit -> R) -> (A -> R) -> A
val fold =
    | None   => l => _ => l unit
    | Some a => _ => r => r a

val _?_:_ : sig of fold (infix 150) = fold

-{ Functor, Applicative and Monad }-

sig Functor : category.functor.Api _?
val Functor = val struct
    val map = f =>
        | None   => None
        | Some a => Some $ f a

    val Laws-Functor =
        val struct
            val ''map id = id'' =
                | None   => refl
                | Some _ => refl

            val ''map f <| map g = map (f <| g)'' =
                | None   => refl
                | Some _ => refl
        end
end

sig Applicative : category.applicative.Api _?
val Applicative = val struct
    open Functor

    val pure = some
    val product =
        let open dsl.begin-end in
        | None   => _ => None
        | Some f =>
            begin
            | None   => None
            | Some a => Some (f,a)
            end

    val Laws-Applicative = val struct end
end

sig Monad : category.monad.Api _?
val Monad = val struct
    open Applicative

    val join =
        | None   => None
        | Some a => a

    val Laws-Monad = val struct end
end
